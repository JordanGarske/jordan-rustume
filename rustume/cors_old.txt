


// use rocket::{ Request, Response};
// use rocket::fairing::{Fairing, Info, Kind};
// struct CorsFairing;
// #[rocket::async_trait]
// impl Fairing for CorsFairing {
//     fn info(&self) -> Info {
//         Info {
//             name: "CORS Fairing",
//             kind: Kind::Response,
//         }
//     }
//     async fn on_response<'r>(&self, request: &'r Request<'_>, response: &mut Response<'r>){
//         if request.method() == Method::Options {
//             response.set_status(Status::NoContent);
//             response.set_header(Header::new(
//                 "Access-Control-Allow-Methods",
//                 "POST, PATCH, GET, DELETE",
//             ));
//             response.set_header(Header::new("Access-Control-Allow-Headers", "*"));
//         }

//         response.set_header(Header::new(
//             "Access-Control-Allow-Origin",
//             " http://localhost:4200",
//         ));
//         response.set_header(Header::new("Access-Control-Allow-Credentials", "true"));
//     }
// }
// Catches all OPTION requests in order to get the CORS related Fairing triggered.
// #[options("/<_..>")]
// fn all_options() {
//     /* Intentionally left empty */
// }    .attach(CorsFairing)
// use rocket::http::Method;
// use rocket::{get, routes};
// use rocket_cors::{AllowedHeaders, AllowedOrigins};